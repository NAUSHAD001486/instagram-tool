service: instagram-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: ap-south-1
  stage: dev
  timeout: 60
  
  httpApi:
    cors: true
  
  environment:
    SCRAPER_API_KEY: ${ssm:/instagram-api/dev/SCRAPER_API_KEY}
    SCRAPINGDOG_API_KEY: ${ssm:/instagram-api/dev/SCRAPINGDOG_API_KEY}
    DYNAMODB_TABLE_NAME: instagram-cache
    TZ: Asia/Kolkata
    LOG_LEVEL: DEBUG
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - ssm:GetParameters
            - ssm:GetParameter
          Resource: arn:aws:ssm:ap-south-1:*:parameter/instagram-api/dev/*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:ap-south-1:*:table/instagram-cache

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
    useStaticCache: true
    useDownloadCache: true
    cacheLocation: ./.cache
    noDeploy:
      - boto3
      - botocore
      - s3transfer
      - jmespath
      - python-dateutil
      - urllib3
      - six

functions:
  api:
    handler: handler.scrape
    memorySize: 2048
    timeout: 60
    events:
      - httpApi:
          path: /api/scrape
          method: post